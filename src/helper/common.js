/**
 * t√¨m ki·∫øm v·ªã tr√≠ c·ªßa 1 gi√° tr·ªã
 * @param {Array} arrayFind m·∫£ng c·∫ßn t√¨m ki·∫øm
 * @param {string} attr thu·ªôc t√≠nh c·∫ßn t√¨m ki·∫øm
 * @param {*} valueFind gi√° tr·ªã c·∫ßn t√¨m ki·∫øm
 * @returns -1 n·∫øu kh√¥ng t√¨m th·∫•y, 1 s·ªë >= 0 n·∫øu t√¨m th·∫•y
 */
export const findIndexByAttribute = function (arrayFind, attr, valueFind) {
  try {
    if (attr === "") {
      for (let i = 0; i < arrayFind.length; i++) {
        if (arrayFind[i] == valueFind) {
          return i;
        }
      }
    } else {
      for (let i = 0; i < arrayFind.length; i++) {
        if (arrayFind[i][attr] == valueFind) {
          return i;
        }
      }
    }

    return -1;
  } catch (error) {
    console.log("üöÄ ~ file: index.js:5 ~ findIndexByAttribute ~ error:", error);
  }
};

/**
 * t√¨m ki·∫øm v·ªã tr√≠ c·ªßa 1 gi√° tr·ªã v·ªõi string v√† t√¨m ki·∫øm theo h∆∞·ªõng LIKE '%a%'
 * @param {Array} arrayFind m·∫£ng c·∫ßn t√¨m ki·∫øm
 * @param {string} attr thu·ªôc t√≠nh c·∫ßn t√¨m ki·∫øm
 * @param {string} valueFind gi√° tr·ªã c·∫ßn t√¨m ki·∫øm
 * @returns -1 n·∫øu kh√¥ng t√¨m th·∫•y, 1 s·ªë >= 0 n·∫øu t√¨m th·∫•y
 */
export const findIndexByAttributeInclude = function (
  arrayFind,
  attr,
  valueFind
) {
  try {
    //format b·ªè h·∫øt kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu cu·ªëi, v√† lowercase n√≥
    let valueFindFormat = valueFind.replaceAll(" ", "").toLowerCase();

    if (attr === "") {
      for (let i = 0; i < arrayFind.length; i++) {
        let arrayEleFormat = arrayFind[i].replaceAll(" ", "").toLowerCase();

        if (
          arrayEleFormat.includes(valueFindFormat) ||
          valueFindFormat.includes(arrayEleFormat)
        ) {
          return i;
        }
      }
    } else {
      for (let i = 0; i < arrayFind.length; i++) {
        let arrayEleFormat = arrayFind[i][attr]
          .replaceAll(" ", "")
          .toLowerCase();

        if (
          arrayEleFormat.includes(valueFindFormat) ||
          valueFindFormat.includes(arrayEleFormat)
        ) {
          return i;
        }
      }
    }

    return -1;
  } catch (error) {
    console.log("üöÄ ~ file: common.js:69 ~ error:", error);
  }
};

/**
 * s·∫Øp x·∫øp array theo thu·ªôc t√≠nh b·∫±ng merge sort
 * @author: TTANH (04/07/2023)
 * @param {*} arrayIn array mu·ªën s·∫Øp x·∫øp
 * @param {*} attr thu·ªôc t√≠nh mu·ªën so s√°nh
 * @param {boolean} isFromHighToLow x√°c ƒë·ªãnh xem c√≥ s·∫Øp x·∫øp theo chi·ªÅu t·ª´ cao ƒë·∫øn th·∫•p kh√¥ng
 * @returns array ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp
 */
export const sortArrayByAttribute = function (
  arrayIn,
  attr,
  isFromHighToLow = true
) {
  return mergeSortByAttribute(arrayIn, attr, isFromHighToLow);
};

/**
 * thu·∫≠t to√°n merge sort, t√°ch array ra l√†m ƒë√¥i
 * @author: TTANH (04/07/2023)
 * @param {*} arr array mu·ªën s·∫Øp x·∫øp
 * @param {*} attr thu·ªôc t√≠nh mu·ªën so s√°nh
 * @param {boolean} isFromHighToLow x√°c ƒë·ªãnh xem c√≥ s·∫Øp x·∫øp theo chi·ªÅu t·ª´ cao ƒë·∫øn th·∫•p kh√¥ng
 * @returns array ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp
 */
const mergeSortByAttribute = function (arr, attr, isFromHighToLow) {
  try {
    if (arr.length <= 1) return arr;

    const right = [...arr];

    const middlePoint = arr.length / 2;
    const left = right.splice(0, middlePoint);

    return mergeUnsortedArrsByAttribute(
      mergeSortByAttribute(left, attr, isFromHighToLow),
      mergeSortByAttribute(right, attr, isFromHighToLow),
      attr,
      isFromHighToLow
    );
  } catch (error) {
    console.log(
      "üöÄ ~ file: common.js:38 ~ mergeSortByAttribute ~ error:",
      error
    );
  }
};

/**
 * merge array left, right v√†o v√† s·∫Øp x·∫øp
 * @author: TTANH (04/07/2023)
 * @param {*} left m·∫£ng b√™n tr√°i
 * @param {*} right m·∫£ng b√™n ph·∫£i
 * @param {*} attr thu·ªôc t√≠nh mu·ªën so s√°nh
 * @param {boolean} isFromHighToLow x√°c ƒë·ªãnh xem c√≥ s·∫Øp x·∫øp theo chi·ªÅu t·ª´ cao ƒë·∫øn th·∫•p kh√¥ng
 * @returns array ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp
 */
const mergeUnsortedArrsByAttribute = function (
  left,
  right,
  attr,
  isFromHighToLow
) {
  try {
    const sortedItems = [];

    while (left.length && right.length) {
      if (isFromHighToLow) {
        if (left[0][attr] >= right[0][attr]) {
          sortedItems.push(left.shift());
        } else {
          sortedItems.push(right.shift());
        }
      } else {
        if (left[0][attr] <= right[0][attr]) {
          sortedItems.push(left.shift());
        } else {
          sortedItems.push(right.shift());
        }
      }
    }

    return [...sortedItems, ...left, ...right];
  } catch (error) {
    console.log(
      "üöÄ ~ file: common.js:60 ~ mergeUnsortedArrsByAttribute ~ error:",
      error
    );
  }
};

/**
 * h√†m t·∫°o ra uuid
 * @author: TTANH (01/07/2023)
 * @returns 1 uuid m·ªõi
 */
export const generateUuid = function () {
  try {
    return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, (c) =>
      (
        c ^
        (crypto.getRandomValues(new Uint8Array(1))[0] & (15 >> (c / 4)))
      ).toString(16)
    );
  } catch (error) {
    console.log("üöÄ ~ file: common.js:30 ~ generateUuid ~ error:", error);
  }
};

/**
 * ki·ªÉm tra xem m·ªôt ƒë·ªëi t∆∞·ª£ng c√≥ r·ªóng hay kh√¥ng
 * @param {object} object ƒë·ªëi t∆∞·ª£ng c·∫ßn ki·ªÉm tra
 * @returns true: r·ªóng, false: kh√¥ng r·ªóng
 * @author: TTANH (29/07/2023)
 */
export const isObjectEmpty = function (object) {
  return Object.keys(object).length === 0;
};

/**
 * so s√°nh 2 object
 * @author: TTANH (07/08/2023)
 * @param {object} object1
 * @param {object} object2
 * @returns true n·∫øu 2 object kh√°c nhau
 */
export const compareObject = function (object1, object2) {
  for (let attr in object1) {
    if (
      (object1[attr] == "" || object1[attr] == null) &&
      (object2[attr] == "" || object2[attr] == null)
    ) {
    } else {
      if (object2[attr] !== object1[attr]) {
        return true;
      }
    }
  }

  return false;
};
